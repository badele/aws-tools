# Local directories
AWS_KEYS="/home/julien/work/projects/aws-ssh-keys"

# EC2 names
AWS_ASG_MANAGER_API='manager-api-asg-20150417-01'
AWS_ASG_SIRIUS='manager-agl'

#
# Return the IP of an EC2 instance filtered by its name
# @param tag_name
# @param state (default: running)
# @return the first IP corresponding to the filters
#
function findEC2InstanceIp() {
  tag_name=$1
  state=${2:-'running'}

  echo $(aws ec2 describe-instances --filters "Name=tag:Name, Values=$tag_name" "Name=instance-state-name, Values=$state" --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
}

#
# Open an SSH connection to the specified instance
# @param instance_name
# @param ssh_user
# @param auth_key_file
#
function connectSSH() {
  name=$1
  user=$2
  key=$3

  ip=$(findEC2InstanceIp $name)
  if [ -z "$ip" ]; then
    echo "Cannot find instance '$name'. Are you sure its online?"
    exit -1
  fi;

  echo "Connecting to $ip as $user with $key..."
  ssh -i $AWS_KEYS/$key $user@$ip
}

#
# Update an auto scaling group designed by it's name to a specified 'desired-capacity'
# @param asg_name
# @param desired_capacity
#
function updateAutoScalingGroup {
  name=$1
  nb=${2:-1}

  local res=$(aws autoscaling update-auto-scaling-group --auto-scaling-group-name $name --desired-capacity $nb 2>&1)
  echo -n "Update auto scaling group '$name' with desired-capacity=$nb ... "
  if [ -z "$res" ]; then
     echo "OK"
  else
    echo "FAIL!"
    echo $res
  fi;
}